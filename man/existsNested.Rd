% Generated by roxygen2 (4.0.2): do not edit by hand
\name{existsNested}
\alias{existsNested}
\title{Exists Nested (generic)}
\usage{
existsNested(id, where = parent.frame(), strict = c(0, 1, 2), ...)
}
\arguments{
\item{id}{\strong{Signature argument}.
Object containing path-like name/ID information.}

\item{where}{\strong{Signature argument}.
Object containing location information.}

\item{strict}{\code{\link{logical}}.
   Controls what happens when \code{id} points to a non-existing component:
\itemize{
         \item{0: }{ignore and return \code{FALSE} to signal that the
             assignment process was not successful or \code{fail_value} depending
             on the value of \code{return_status}}
         \item{1: }{ignore and with warning and return \code{FALSE}}
         \item{2: }{ignore and with error}
   }}

\item{...}{Further arguments to be passed to subsequent functions/methods.}
}
\description{
Checks if a component exists inside of a nested object structure
based on a path-like \code{id} with the last ID component being the
actual object name that the function looks for.
}
\section{Path-like identifiers}{


Values for \code{id} are expected to be of structure \code{a/b/c/.../z},
i.e. path-like identifiers using a slash as separator.
The identifier is transformed to \code{a$b$c$...$z} and then in turn to a
valid \emph{get} or \code{assign} expression
(i.e. \code{a$b$c$...$z} and \code{a$b$c$...$z <- value}).
Of course, "atomic" paths (e.g. only \code{a}) are also valid.
}
\examples{
\dontrun{

##------------------------------------------------------------------------------
## Basics //
##------------------------------------------------------------------------------

setNested(id = "test", value = TRUE)
existsNested(id = "test")

setNested(id = "a/b/c", value = 10)
existsNested(id = "a")
existsNested(id = "a/b")
existsNested(id = "a/b/c")
existsNested(id = "a/b/c/d")

existsNested(id = "c")
existsNested(id = "c/d/e")
  
##------------------------------------------------------------------------------
## Strictness levels //
##------------------------------------------------------------------------------

## Empty ID //
existsNested(id = character())
try(existsNested(id = character(), strict = 1))
try(existsNested(id = character(), strict = 2))

## Not-existing //  
existsNested(id = "c/d/e")
try(existsNested(id = "c/d/e", strict = 1))
try(existsNested(id = "c/d/e", strict = 2))

##------------------------------------------------------------------------------
## Explicit `where` //
##------------------------------------------------------------------------------

where <- new.env()
setNested(id = "a/b/c", value = 10, where = where)
existsNested(id = "a/b/c", where = where)
existsNested(id = "a/b/c/d", where = where)
existsNested(id = "c/d/e", where = where)

}
}
\author{
Janko Thyson \email{janko.thyson@rappster.de}
}
\references{
\url{http://github.com/Rappster/nestr}
}
\seealso{
\code{
  	\link[nestr]{existsNested-char-env-method},
    \link[nestr]{setNested},
    \link[nestr]{getNested},
    \link[nestr]{rmNested}
}
}

