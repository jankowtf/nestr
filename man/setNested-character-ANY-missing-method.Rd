% Generated by roxygen2 (4.0.2): do not edit by hand
\docType{methods}
\name{setNested,character,ANY,missing-method}
\alias{setNested,character,ANY,missing-method}
\alias{setNested-char-any-miss-method}
\title{Set Nested (char-any-miss)}
\usage{
\S4method{setNested}{character,ANY,missing}(id, value, where = parent.frame(),
  must_exist = FALSE, typed = FALSE, force = FALSE, gap = FALSE,
  strict = FALSE, reactive = FALSE, ...)
}
\arguments{
\item{id}{\code{\link{character}}.}

\item{value}{\code{\link{ANY}}.}

\item{where}{\code{\link{missing}}.}

\item{must_exist}{\code{\link{logical}}.
\code{TRUE}: \code{id} pointing to a non-existing object value either triggers
an error or results in return value \code{FALSE} (depending on \code{strict});
\code{FALSE}: object value that \code{id} points to is set.}

\item{typed}{\code{\link{logical}}.
Implies that \code{must_exist} is automatically set to \code{TRUE}.
\code{TRUE}: \code{class(value)} must match the class of the existing
object value;
\code{FALSE}: object value that \code{id} points to is set without class check.}

\item{force}{\code{\link{logical}}.
\code{TRUE}: when \code{dirname(id)} points to a \emph{leaf} instead of a
\emph{branch} (i.e. \code{dirname(id)} is not an \code{environment}),
overwrite it to turn it into a branch;
\code{FALSE}: either return with \code{FALSE} or throw error in such cases
(depending on value of \code{strict});}

\item{gap}{\code{\link{logical}}.
\code{TRUE}: when \code{dirname(id)} points to a non-existing parent
branch or if there are any missing branches in the path tree,
then auto-create all missing branches;
\code{FALSE}: either return with \code{FALSE} or throw error in such cases
(depending on \code{strict});}

\item{strict}{\code{\link{logical}}.
\code{TRUE}: \code{id} pointing to a non-existing object value triggers
error; \code{FALSE}: \code{id} pointing to a non-existing object value leads
to return value \code{NULL}.}

\item{reactive}{\code{\link{logical}}.
\code{TRUE}: set reactive object value via
\code{\link[nestr]{setReactive}} or \code{\link[nestr]{setShinyReactive}}.
\code{FALSE}: set regular/non-reactive object value.
Note that if \code{value = reactiveExpression()}, \code{reactive} is
automatically set to \code{TRUE}.}
}
\value{
See method
   \code{\link{setNested-char-any-char-method}}.
}
\description{
See generic: \code{\link[nestr]{setNested}}
}
\examples{
\dontrun{

##------------------------------------------------------------------------------
## Basics //
##------------------------------------------------------------------------------

## Simple name/ID //
setNested(id = "test", value = TRUE)
getNested(id = "test")

## Path-like name/ID //
setNested(id = "test/a", value = TRUE, strict = TRUE)
## --> note that currently `test` is a leaf, not a branch
setNested(id = "test/a", value = TRUE, force = TRUE)
## --> `test` needs to be transformed from a "leaf"
## to a "branch" component (i.e. an environment); `force = TRUE` 
## takes care of that

getNested(id = "test")
## --> branch
ls(getNested(id = "test"))
getNested(id = "test/a")
## --> leaf

## Must exist //
setNested(id = "test/b", value = TRUE, must_exist = TRUE)
try(setNested(id = "test/b", value = TRUE, must_exist = TRUE, strict = TRUE))

## Typed //
setNested(id = "test/c", value = "hello world!", typed = TRUE, gap = TRUE)
setNested(id = "test/c", value = 1:3)
## --> wrong class, but `strict_set = 0` --> disregarded without warning or error
getNested(id = "test/c")
## --> still `hello world!` because `value = 1:3` had wrong class

setNested(id = "test/c", value = "hello world!", typed = TRUE, strict_set = 1)
try(setNested(id = "test/c", value = 1:3))
## --> warning and no assignment
getNested(id = "test/c")
## --> still `hello world!`

setNested(id = "test/c", value = "hello world!", typed = TRUE, strict_set = 2)
try(setNested(id = "test/c", value = 1:3))
## --> error
getNested(id = "test/c")
## --> still `hello world!`

setNested(id = "test/a", value = "something else")
## --> correct class --> value changed 
getNested(id = "test/a")
  
## Clean up //
rm(test)

##------------------------------------------------------------------------------
## Different `where` //
##------------------------------------------------------------------------------

where <- new.env()
setNested(id = "a/b/c", value = 10, where = where, gap = TRUE)
getNested(id = "a/b/c", where = where)
identical(getNested(id = "a/b/c", where = where), where$a$b$c)

## Clean up //
rm(where)

##------------------------------------------------------------------------------
## Numerical names/IDs //
##------------------------------------------------------------------------------

setNested(id = "20140101", value = TRUE)
"20140101" \%in\% ls(all.names = TRUE)
getNested(id = "20140101")

## Clean up //
rm("20140101")

##------------------------------------------------------------------------------
## Branch gaps //
##------------------------------------------------------------------------------
  
setNested(id = "a/b/c/d", value = TRUE)
try(setNested(id = "a/b/c/d", value = TRUE, strict = TRUE))
## --> branch gap: branches a, b and c do not exist yet

## Closing the gap //
setNested(id = "a/b/c/d", value = TRUE, gap = TRUE)

## Inspect //
ls()
ls(getNested(id = "a"))
ls(getNested(id = "a/b"))
ls(getNested(id = "a/b/c"))
getNested(id = "a/b/c/d")

## Clean up //
rm(a)

##------------------------------------------------------------------------------
## Forcing leafs to branches //
##------------------------------------------------------------------------------
  
setNested(id = "a", value = "hello world!")
setNested(id = "a/b", value = 10, gap = TRUE)
try(setNested(id = "a/b", value = 10, gap = TRUE, strict = TRUE))
## --> root branch `a` is not an environment but a leaf:
getNested(id = "a")

## Forcing leaf into a branch //
setNested(id = "a/b", value = 10, force = TRUE)
ls(getNested(id = "a"))
## --> branch 
getNested(id = "a/b")
## --> leaf

## Clean up //
rm(a)

##------------------------------------------------------------------------------
## Reactive object values //
##------------------------------------------------------------------------------

setNested(id = "dirs/root", value = getwd(), reactive = TRUE, gap = TRUE)
setNested(
  id = "dirs/my_dir", 
  value = reactiveExpression(
    file.path(getNested(id = "dirs/root", where = parent.frame(7)), "my_dir")
  )
)
## --> `dirs/my_dir` should always dependent on of `dirs/root`
## --> note that you can ommit `reactive = TRUE` when `value = reactiveExpression(...)`
## --> Issue #1: need to specify `where = parent.frame(7)`

getNested(id = "dirs/root")
getNested(id = "dirs/my_dir")

## Changing via `setNested()` //
setNested(id = "dirs/root", value = tempdir())
getNested(id = "dirs/root")
getNested(id = "dirs/my_dir")

## When changed manually //
dirs$root <- "c:/temp"
dirs$root
dirs$my_dir

## Trying to change reactive observer //
setNested(id = "dirs/my_dir", value = TRUE)
getNested(id = "dirs/my_dir")
## --> has no effect; warning and error behavior can be 
## controlled via `strict_set`

## Clean up //
rm(dirs)

}

}
\author{
Janko Thyson \email{janko.thyson@rappster.de}
}
\references{
\url{http://github.com/Rappster/nestr}
}
\seealso{
\code{
   \link[nestr]{setNested}
}
}

