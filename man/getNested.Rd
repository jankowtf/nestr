% Generated by roxygen2 (4.0.2): do not edit by hand
\name{getNested}
\alias{getNested}
\title{Get Nested (generic)}
\usage{
getNested(id, where = parent.frame(), default = NULL, strict = c(0, 1, 2),
  ...)
}
\arguments{
\item{id}{\strong{Signature argument}.
Object containing path-like name/ID information.}

\item{where}{\strong{Signature argument}.
Object containing location information.}

\item{default}{\code{\link{ANY}}.
Value to be returned if component does not exist.}

\item{strict}{\code{\link{logical}}.
 Controls what happens when \code{id} points to a non-existing component:
\itemize{
         \item{0: }{ignore and return \code{FALSE} to signal that the
             assignment process was not successful or \code{fail_value} depending
             on the value of \code{return_status}}
         \item{1: }{ignore and with warning and return \code{FALSE}}
         \item{2: }{ignore and with error}
   }}

\item{...}{Further arguments to be passed to subsequent functions/methods.}
}
\description{
Retrieves value from a nested object structure based on a path-like
\code{id} with the last ID component being the actual object name that contains
the value.
}
\section{Path-like identifiers}{


Values for \code{id} are expected to be of structure \code{a/b/c/.../z},
i.e. path-like identifiers using a slash as separator.
The identifier is transformed to \code{a$b$c$...$z} and then in turn to a
valid \emph{get} or \code{assign} expression
(i.e. \code{a$b$c$...$z} and \code{a$b$c$...$z <- value}).
Of course, "atomic" paths (e.g. only \code{a}) are also valid.
}
\examples{
\dontrun{

## Also see examples at `?setNested`
  
##------------------------------------------------------------------------------
## Basics //
##------------------------------------------------------------------------------

setNested(id = "test", value = TRUE)
getNested(id = "test")
## --> leaf

setNested(id = "a/b/c", value = 10, gap = TRUE)
ls(getNested(id = "a"))
## --> branch
ls(getNested(id = "a/b"))
## --> branch
getNested(id = "a/b/c")
## --> leaf
  
## Clean up //
rm(test)
rm(a)

##------------------------------------------------------------------------------
## Explicit `where` //
##------------------------------------------------------------------------------

where <- new.env()
setNested(id = "a/b/c", value = 10, where = where, gap = TRUE)
getNested(id = "a/b/c", where = where)

## Clean up //
rm(where)

##------------------------------------------------------------------------------
## Different `default` //
##------------------------------------------------------------------------------

setNested(id = "test", value = 10)
getNested(id = "test", default = NA)
getNested(id = "z", default = NA)
getNested(id = "z/a/b", default = NA)

getNested(id = "test", default = "nope")
getNested(id = "z", default = "nope")
getNested(id = "z/a/b", default = "nope")

## Clean up //
rm(test)

}
}
\author{
Janko Thyson \email{janko.thyson@rappster.de}
}
\references{
\url{http://github.com/Rappster/nestr}
}
\seealso{
\code{
  	\link[nestr]{getNested-char-env-method},
    \link[nestr]{setNested},
    \link[nestr]{rmNested}
}
}

