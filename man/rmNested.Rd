% Generated by roxygen2 (4.0.2): do not edit by hand
\name{rmNested}
\alias{rmNested}
\title{Remove Nested (generic)}
\usage{
rmNested(id, where = parent.frame(), strict = FALSE, ...)
}
\arguments{
\item{id}{\strong{Signature argument}.
Object containing path-like name/ID information.}

\item{where}{\strong{Signature argument}.
Object containing location information.}

\item{strict}{\code{\link{logical}}.
\code{TRUE}: the following constellations trigger an error:
\itemize{
    \item{\code{id} pointing to a non-existing component}
    \item{empty \code{id}}
}
\code{FALSE}: the stated constellations lead to the return value
being \code{FALSE}.}

\item{...}{Further arguments to be passed to subsequent functions/methods.}
}
\description{
Removes a component from a nested object structure based on a path-like
\code{id} with the last ID component being the name of the actual object
being removed.
}
\section{Path-like identifiers}{


Values for \code{id} are expected to be of structure \code{a/b/c/.../z},
i.e. path-like identifiers using a slash as separator.
The identifier is transformed to \code{a$b$c$...$z} and then in turn to a
valid \emph{get} or \code{assign} expression
(i.e. \code{a$b$c$...$z} and \code{a$b$c$...$z <- value}).
Of course, "atomic" paths (e.g. only \code{a}) are also valid.
}
\examples{
\dontrun{

##------------------------------------------------------------------------------
## Default `where` //
##------------------------------------------------------------------------------

setNested(id = "a", value = TRUE)
exists("a", environment(), inherits = FALSE)
rmNested(id = "a")
exists("a", environment(), inherits = FALSE)

setNested(id = "a/b/c", value = 10, gap = TRUE)
exists("c", environment()$a$b, inherits = FALSE)
rmNested(id = "a/b/c")
exists("c", environment()$a$b, inherits = FALSE)

## Clean up //
rm(a)

##------------------------------------------------------------------------------
## Different `where` // 
##------------------------------------------------------------------------------

where <- new.env()
setNested(id = "a/b/c", value = 10, where = where, gap = TRUE)
rmNested(id = "a/b/c", where = where)
exists("c", where$a$b, inherits = FALSE)

## Clean up //
rm(where)
  
##------------------------------------------------------------------------------
## Strictness //
##------------------------------------------------------------------------------

rmNested(id = "a")
try(rmNested(id = "a", strict = TRUE))

rmNested(id = "a/b/c")
try(rmNested(id = "a/b/c", strict = TRUE))

rmNested(id = character())
try(rmNested(id = character(), strict = TRUE))
    
}
}
\author{
Janko Thyson \email{janko.thyson@rappster.de}
}
\references{
\url{http://github.com/Rappster/nestr}
}
\seealso{
\code{
  	\link[nestr]{rmNested-char-env-method},
    \link[nestr]{setNested},
    \link[nestr]{getNested}
}
}

