% Generated by roxygen2 (4.0.2): do not edit by hand
\docType{methods}
\name{getNested,character,environment-method}
\alias{getNested,character,environment-method}
\alias{getNested-char-miss-method}
\title{Get Nested (char-env)}
\usage{
\S4method{getNested}{character,environment}(id, where = parent.frame(),
  default = NULL, strict = c(0, 1, 2), ...)
}
\arguments{
\item{id}{\code{\link{character}}.}

\item{where}{\code{\link{environment}}.}

\item{default}{\code{\link{ANY}}.
Value to be returned if component does not exist.}

\item{strict}{\code{\link{logical}}.
 Controls what happens when \code{id} points to a non-existing component:
\itemize{
         \item{0: }{ignore and return \code{FALSE} to signal that the
             assignment process was not successful or \code{fail_value} depending
             on the value of \code{return_status}}
         \item{1: }{ignore and with warning and return \code{FALSE}}
         \item{2: }{ignore and with error}
   }}

\item{...}{Further arguments to be passed to subsequent functions/methods.}
}
\value{
\code{\link{ANY}}. Component value or for invalid argument input
		and non-existing component the value of \code{default} unless
		\code{strict == 2} in which case an error is thrown.
}
\description{
See generic: \code{\link[nestr]{getNested}}
}
\examples{
\dontrun{

## Also see examples at `?setNested`
  
##------------------------------------------------------------------------------
## Basics //
##------------------------------------------------------------------------------

setNested(id = "test", value = TRUE)
getNested(id = "test")
## --> leaf

setNested(id = "a/b/c", value = 10, gap = TRUE)
ls(getNested(id = "a"))
## --> branch
ls(getNested(id = "a/b"))
## --> branch
getNested(id = "a/b/c")
## --> leaf
  
## Clean up //
rm(test)
rm(a)

##------------------------------------------------------------------------------
## Explicit `where` //
##------------------------------------------------------------------------------

where <- new.env()
setNested(id = "a/b/c", value = 10, where = where, gap = TRUE)
getNested(id = "a/b/c", where = where)

## Clean up //
rm(where)

##------------------------------------------------------------------------------
## Different `default` //
##------------------------------------------------------------------------------

setNested(id = "test", value = 10)
getNested(id = "test", default = NA)
getNested(id = "z", default = NA)
getNested(id = "z/a/b", default = NA)

getNested(id = "test", default = "nope")
getNested(id = "z", default = "nope")
getNested(id = "z/a/b", default = "nope")

## Clean up //
rm(test)

}
}
\author{
Janko Thyson \email{janko.thyson@rappster.de}
}
\references{
\url{http://github.com/Rappster/nestr}
}
\seealso{
\code{
   \link[nestr]{getNested}
}
}

