% Generated by roxygen2 (4.0.2): do not edit by hand
\docType{methods}
\name{fromList,list,environment-method}
\alias{fromList,list,environment-method}
\alias{fromList-list-env-method}
\title{Get Nested (list-env)}
\usage{
\S4method{fromList}{list,environment}(input, where = parent.frame(),
  strict = FALSE, ...)
}
\arguments{
\item{input}{\code{\link{list}}.}

\item{where}{\code{\link{environment}}.}

\item{strict}{\code{\link{logical}}.
\code{TRUE}:
\code{FALSE}:}

\item{...}{Further arguments to be passed to subsequent functions/methods.}
}
\value{
\code{\link{ANY}}. Option value or for non-existing option
   (i.e. wrong \code{input}): \code{NULL} if \code{strict = FALSE} and an error
   if \code{strict = TRUE}.
}
\description{
See generic: \code{\link[nestr]{fromList}}
}
\examples{
\dontrun{

##------------------------------------------------------------------------------
## In parent frame //
##------------------------------------------------------------------------------  

input <- list(
  europe = list(germany = list(berlin = 1, hamburg = 2, munich = 3)),
  america = list(usa = list(wisconsin = list(madison = 1))),
  south.america = 1,
  as.list(1:3)
)

res <- fromList(input = input)
res
ls(res)
ls(europe)
ls(europe$germany)
getNested("europe/germany/berlin")

ls(res$"[4]")
getNested("[4]/[1]")
getNested("[4]/[2]")
getNested("[4]/[3]")

##------------------------------------------------------------------------------
## In custom environment //
##------------------------------------------------------------------------------  

input <- list(
  europe = list(germany = list(berlin = 1, hamburg = 2, munich = 3)),
  america = list(usa = list(wisconsin = list(madison = 1))),
  south.america = 1,
  as.list(1:3)
)

where <- new.env()
res <- fromList(input = input, where = where)
identical(res, where)

## A bit more convenient //
where <- fromList(input = input, where = new.env())

ls(where$europe)
ls(where$europe$germany)
getNested("where/europe/germany/berlin")
getNested("europe/germany/berlin", where = where)

ls(where$"[4]")
getNested("[4]/[1]", where = where)
getNested("[4]/[2]", where = where)
getNested("[4]/[3]", where = where)

}
}
\author{
Janko Thyson \email{janko.thyson@rappster.de}
}
\references{
\url{http://github.com/Rappster/nestr}
}
\seealso{
\code{
   \link[nestr]{fromList}
}
}

